/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-20")
public class QrCodeLoginRequest implements org.apache.thrift.TBase<QrCodeLoginRequest, QrCodeLoginRequest._Fields>, java.io.Serializable, Cloneable, Comparable<QrCodeLoginRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QrCodeLoginRequest");

  private static final org.apache.thrift.protocol.TField AUTH_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authSessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SYSTEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("systemName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTO_LOGIN_IS_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("autoLoginIsRequired", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QrCodeLoginRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QrCodeLoginRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String authSessionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String systemName; // required
  public boolean autoLoginIsRequired; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTH_SESSION_ID((short)1, "authSessionId"),
    SYSTEM_NAME((short)2, "systemName"),
    AUTO_LOGIN_IS_REQUIRED((short)3, "autoLoginIsRequired");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_SESSION_ID
          return AUTH_SESSION_ID;
        case 2: // SYSTEM_NAME
          return SYSTEM_NAME;
        case 3: // AUTO_LOGIN_IS_REQUIRED
          return AUTO_LOGIN_IS_REQUIRED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTOLOGINISREQUIRED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("authSessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("systemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTO_LOGIN_IS_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("autoLoginIsRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QrCodeLoginRequest.class, metaDataMap);
  }

  public QrCodeLoginRequest() {
  }

  public QrCodeLoginRequest(
    java.lang.String authSessionId,
    java.lang.String systemName,
    boolean autoLoginIsRequired)
  {
    this();
    this.authSessionId = authSessionId;
    this.systemName = systemName;
    this.autoLoginIsRequired = autoLoginIsRequired;
    setAutoLoginIsRequiredIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QrCodeLoginRequest(QrCodeLoginRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAuthSessionId()) {
      this.authSessionId = other.authSessionId;
    }
    if (other.isSetSystemName()) {
      this.systemName = other.systemName;
    }
    this.autoLoginIsRequired = other.autoLoginIsRequired;
  }

  public QrCodeLoginRequest deepCopy() {
    return new QrCodeLoginRequest(this);
  }

  @Override
  public void clear() {
    this.authSessionId = null;
    this.systemName = null;
    setAutoLoginIsRequiredIsSet(false);
    this.autoLoginIsRequired = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthSessionId() {
    return this.authSessionId;
  }

  public QrCodeLoginRequest setAuthSessionId(@org.apache.thrift.annotation.Nullable java.lang.String authSessionId) {
    this.authSessionId = authSessionId;
    return this;
  }

  public void unsetAuthSessionId() {
    this.authSessionId = null;
  }

  /** Returns true if field authSessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthSessionId() {
    return this.authSessionId != null;
  }

  public void setAuthSessionIdIsSet(boolean value) {
    if (!value) {
      this.authSessionId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSystemName() {
    return this.systemName;
  }

  public QrCodeLoginRequest setSystemName(@org.apache.thrift.annotation.Nullable java.lang.String systemName) {
    this.systemName = systemName;
    return this;
  }

  public void unsetSystemName() {
    this.systemName = null;
  }

  /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemName() {
    return this.systemName != null;
  }

  public void setSystemNameIsSet(boolean value) {
    if (!value) {
      this.systemName = null;
    }
  }

  public boolean isAutoLoginIsRequired() {
    return this.autoLoginIsRequired;
  }

  public QrCodeLoginRequest setAutoLoginIsRequired(boolean autoLoginIsRequired) {
    this.autoLoginIsRequired = autoLoginIsRequired;
    setAutoLoginIsRequiredIsSet(true);
    return this;
  }

  public void unsetAutoLoginIsRequired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOLOGINISREQUIRED_ISSET_ID);
  }

  /** Returns true if field autoLoginIsRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoLoginIsRequired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOLOGINISREQUIRED_ISSET_ID);
  }

  public void setAutoLoginIsRequiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOLOGINISREQUIRED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AUTH_SESSION_ID:
      if (value == null) {
        unsetAuthSessionId();
      } else {
        setAuthSessionId((java.lang.String)value);
      }
      break;

    case SYSTEM_NAME:
      if (value == null) {
        unsetSystemName();
      } else {
        setSystemName((java.lang.String)value);
      }
      break;

    case AUTO_LOGIN_IS_REQUIRED:
      if (value == null) {
        unsetAutoLoginIsRequired();
      } else {
        setAutoLoginIsRequired((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_SESSION_ID:
      return getAuthSessionId();

    case SYSTEM_NAME:
      return getSystemName();

    case AUTO_LOGIN_IS_REQUIRED:
      return isAutoLoginIsRequired();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AUTH_SESSION_ID:
      return isSetAuthSessionId();
    case SYSTEM_NAME:
      return isSetSystemName();
    case AUTO_LOGIN_IS_REQUIRED:
      return isSetAutoLoginIsRequired();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof QrCodeLoginRequest)
      return this.equals((QrCodeLoginRequest)that);
    return false;
  }

  public boolean equals(QrCodeLoginRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_authSessionId = true && this.isSetAuthSessionId();
    boolean that_present_authSessionId = true && that.isSetAuthSessionId();
    if (this_present_authSessionId || that_present_authSessionId) {
      if (!(this_present_authSessionId && that_present_authSessionId))
        return false;
      if (!this.authSessionId.equals(that.authSessionId))
        return false;
    }

    boolean this_present_systemName = true && this.isSetSystemName();
    boolean that_present_systemName = true && that.isSetSystemName();
    if (this_present_systemName || that_present_systemName) {
      if (!(this_present_systemName && that_present_systemName))
        return false;
      if (!this.systemName.equals(that.systemName))
        return false;
    }

    boolean this_present_autoLoginIsRequired = true;
    boolean that_present_autoLoginIsRequired = true;
    if (this_present_autoLoginIsRequired || that_present_autoLoginIsRequired) {
      if (!(this_present_autoLoginIsRequired && that_present_autoLoginIsRequired))
        return false;
      if (this.autoLoginIsRequired != that.autoLoginIsRequired)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAuthSessionId()) ? 131071 : 524287);
    if (isSetAuthSessionId())
      hashCode = hashCode * 8191 + authSessionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSystemName()) ? 131071 : 524287);
    if (isSetSystemName())
      hashCode = hashCode * 8191 + systemName.hashCode();

    hashCode = hashCode * 8191 + ((autoLoginIsRequired) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(QrCodeLoginRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAuthSessionId()).compareTo(other.isSetAuthSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authSessionId, other.authSessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSystemName()).compareTo(other.isSetSystemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemName, other.systemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAutoLoginIsRequired()).compareTo(other.isSetAutoLoginIsRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoLoginIsRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoLoginIsRequired, other.autoLoginIsRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("QrCodeLoginRequest(");
    boolean first = true;

    sb.append("authSessionId:");
    if (this.authSessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.authSessionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemName:");
    if (this.systemName == null) {
      sb.append("null");
    } else {
      sb.append(this.systemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoLoginIsRequired:");
    sb.append(this.autoLoginIsRequired);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QrCodeLoginRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QrCodeLoginRequestStandardScheme getScheme() {
      return new QrCodeLoginRequestStandardScheme();
    }
  }

  private static class QrCodeLoginRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<QrCodeLoginRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QrCodeLoginRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authSessionId = iprot.readString();
              struct.setAuthSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYSTEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemName = iprot.readString();
              struct.setSystemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTO_LOGIN_IS_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoLoginIsRequired = iprot.readBool();
              struct.setAutoLoginIsRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QrCodeLoginRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authSessionId != null) {
        oprot.writeFieldBegin(AUTH_SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.authSessionId);
        oprot.writeFieldEnd();
      }
      if (struct.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(struct.systemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTO_LOGIN_IS_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.autoLoginIsRequired);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QrCodeLoginRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QrCodeLoginRequestTupleScheme getScheme() {
      return new QrCodeLoginRequestTupleScheme();
    }
  }

  private static class QrCodeLoginRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<QrCodeLoginRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QrCodeLoginRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuthSessionId()) {
        optionals.set(0);
      }
      if (struct.isSetSystemName()) {
        optionals.set(1);
      }
      if (struct.isSetAutoLoginIsRequired()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAuthSessionId()) {
        oprot.writeString(struct.authSessionId);
      }
      if (struct.isSetSystemName()) {
        oprot.writeString(struct.systemName);
      }
      if (struct.isSetAutoLoginIsRequired()) {
        oprot.writeBool(struct.autoLoginIsRequired);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QrCodeLoginRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.authSessionId = iprot.readString();
        struct.setAuthSessionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.systemName = iprot.readString();
        struct.setSystemNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.autoLoginIsRequired = iprot.readBool();
        struct.setAutoLoginIsRequiredIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

